# This is a file written in Emacs and authored using org-mode (http://orgmode.org/)
# The "README.md" file is generated from this file by running the
# "M-x org-md-export-to-markdown" command from inside of Emacs.
#
# Don't render a Table of Contents
#+OPTIONS: toc:nil
# Don't render section numbers
#+OPTIONS: num:nil
# Turn of subscript parsing: http://super-user.org/wordpress/2012/02/02/how-to-get-rid-of-subscript-annoyance-in-org-mode/comment-page-1/
#+OPTIONS: ^:{}
* Introduction
  This is a plugin for OpenVPN (Community Edition) that authenticates
  users directly against Okta, with support for MFA.

  #+BEGIN_EXAMPLE
  Note: This plugin does not work with OpenVPN Access Server (OpenVPN-AS)
  #+END_EXAMPLE

* Requirements
  This plugin requires that OpenVPN Community Edition be configured or
  used in the following ways:

  1. OpenVPN must be configured to call plugins via a deferred call.
  2. By default, OpenVPN clients /must/ authenticate using client SSL
     certificates.
  3. If authenticating using MFA, the end user will authenticate by
     appending their six-digit MFA token to the end of their password.

  For example, if a user's password is =correcthorsebatterystaple= and
  their six-digit MFA token is =123456=, they would use
  =correcthorsebatterystaple123456= as the password for their OpenVPN
  client

* Setup and Configuration
** Verify the GPG signature on this repository
   The source code for this plugin is signed using [[https://gnupg.org/][GPG]].

   It is recommended that this plugin be verified using the
   <code>git tag -v $TAGNAME</code> command.

   For example, to verify the v0.10.0 tag, use the command below:

   #+BEGIN_SRC shell
   $ git tag -v v0.10.0
   #+END_SRC

** Install dependent package for ubuntu version > 18.04
   #+BEGIN_SRC shell
   $ apt-get -y install libsystemd-dev
   #+END_SRC

** Compile the C plugin
   Compile the C plugin from this directory using this command:
   #+BEGIN_SRC shell
   $ make
   #+END_SRC
** Install required Python packages
   The Python code in this project depends on the following Python packages:
   - urllib3
   - cryptography
   - certifi

   If you use [[https://en.wikipedia.org/wiki/Pip_%28package_manager%29][pip]] to manage your Python packages, you can install
   these requirements using this command:
   #+BEGIN_SRC shell
   $ sudo pip install urllib3 cryptography certifi
   #+END_SRC

   If the pip command above doesn't work, you may need to install pip
   or the development software that cryptography depends on.


   This project also comes with a <code>requirements.txt</code> file
   that works nicely with pip:

   #+BEGIN_SRC shell
   $ sudo pip install -r requirements.txt
   #+END_SRC
** Install the Okta OpenVPN plugin
   You have two options to install the Okta OpenVPN plugin:
   1. For default setups, use <code>make install</code> to run the install for you.
   2. For custom setups, follow the manual installation instructions below.

   If you have a default OpenVPN setup,
   where plugins are stored in <code>/usr/lib/openvpn/plugins</code>
   and configuration files are stored in <code>/etc/openvpn</code>, then you can use the
   <code>make install</code> command to install the Okta OpenVPN
   plugin:

   #+BEGIN_SRC shell
   $ sudo make install
   #+END_SRC
** Manually installing the Okta OpenVPN plugin
   If you have a custom setup,
   follow the instructions below to install
   the C plugin and Python scripts that constitute the Okta OpenVPN plugin.
*** Manually installing the C Plugin
    To manually install the C plugin, copy the <code>defer_simple.so</code> file to the location where your OpenVPN plugins are stored.
*** Manually installing the Python script
    To manually install the Python scripts, copy the <code>okta_openvpn.py</code>,
    <code>okta_pinset.py</code>,
    and <code>okta_openvpn.ini</code> files to the location where your OpenVPN plugin scripts are stored.
** Make sure that OpenVPN has a tempory directory
   In OpenVPN, the "deferred plugin" model requires the use of
   temporary files to work.
   It is recommended that these temporary files be stored in a directory that only OpenVPN has access to.
   The default location for this directory is
   <code>/etc/openvpn/tmp</code>. If this directory doesn't exist,
   create it using this command:
   #+BEGIN_SRC shell
     $ sudo mkdir /etc/openvpn/tmp
   #+END_SRC
   Use the [[https://en.wikipedia.org/wiki/Chown][chown]] and [[https://en.wikipedia.org/wiki/Chmod][chmod]] commands to set permissions approprate to your setup.
** Configure the Okta OpenVPN plugin
   The Okta OpenVPN plugin is configured via the <code>okta_openvpn.ini</code> file.
   You *must* update this file with the configuration options for your Okta organization for the plugin to work.

   If you installed the Okta OpenVPN plugin to the default location,
   run this command to edit your configuration file.

   #+BEGIN_SRC shell
     $ sudo $EDITOR /etc/openvpn/okta_openvpn.ini
   #+END_SRC
** Configure OpenVPN to use the C Plugin
   Set up OpenVPN to call the Okta plugin by adding the following
   lines to your OpenVPN <code>server.conf</code> configuration file:

   #+BEGIN_SRC ini
     plugin /usr/lib/openvpn/plugins/defer_simple.so /usr/lib/openvpn/plugins/okta_openvpn.py
     tmp-dir "/etc/openvpn/tmp"
   #+END_SRC
   The default location for OpenVPN configuration files is <code>/etc/openvpn/server.conf</code>
* Testing
  The code in <code>okta_openvpn.py</code> has 100% test coverage. Tests are run using the "<code>nosetests</code>" command.

  Run the commands below to set up an environment for testing:

  #+BEGIN_SRC shell
    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install -r requirements.txt
  #+END_SRC

  Once that is done, run the tests with the <code>nosetests</code>
  command:

  #+BEGIN_SRC shell
    $ nosetests
  #+END_SRC

  To generate a code-coverage report on the tests, run
  <code>nosetests</code> with the following flags:

  #+BEGIN_SRC shell
    $ nosetests --with-coverage --cover-html
  #+END_SRC

  View the coverage reports by opening the <code>cover/index.html</code> in your favorite text editor.
* Contact
  Updates or corrections to this document are very welcome. Feel free
  to send me [[https://help.github.com/articles/using-pull-requests/][pull requests]] with suggestions.

  # In a (perhaps fruitless) effort to avoid getting more spam, I've
  # encoded my email address using HTML entities.
  Additionally, please send me comments or questions via email: &#106;&#111;&#101;&#108;&#046;&#102;&#114;&#097;&#110;&#117;&#115;&#105;&#099;&#064;&#111;&#107;&#116;&#097;&#046;&#099;&#111;&#109;

* Worklog                                                          :noexport:
** Installing on macOS
   http://stackoverflow.com/a/33125400/3191847
